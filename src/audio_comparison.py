import soundfile as sf
import numpy as np
import matplotlib.pyplot as plt
import os

class AudioComparator:
    def __init__(self):
        pass

    def load_audio(self, file_path: str):
        """Loads an audio file and returns its data and sample rate."""
        try:
            data, samplerate = sf.read(file_path)
            if data.ndim > 1:
                data = data.mean(axis=1) # Convert to mono if stereo
            return data, samplerate
        except Exception as e:
            print(f"Error loading audio file {file_path}: {e}")
            return None, None

    def plot_waveform(self, audio_data: np.ndarray, samplerate: int, title: str, ax):
        """Plots the waveform of audio data."""
        time = np.arange(0, len(audio_data)) / samplerate
        ax.plot(time, audio_data)
        ax.set_title(title)
        ax.set_xlabel("Time (s)")
        ax.set_ylabel("Amplitude")
        ax.grid(True)

    def compare_audio_signals(self, original_file: str, translated_file: str, output_dir: str = "research"):
        """
        Loads and compares two audio files by plotting their waveforms.
        :param original_file: Path to the original audio file.
        :param translated_file: Path to the translated audio file.
        :param output_dir: Directory to save the comparison plots.
        """
        original_data, original_sr = self.load_audio(original_file)
        translated_data, translated_sr = self.load_audio(translated_file)

        if original_data is None or translated_data is None:
            print("Could not load one or both audio files for comparison.")
            return

        print(f"\n--- Audio Comparison ---")
        print(f"Original Audio: {original_file} (Sample Rate: {original_sr} Hz, Duration: {len(original_data)/original_sr:.2f} s)")
        print(f"Translated Audio: {translated_file} (Sample Rate: {translated_sr} Hz, Duration: {len(translated_data)/translated_sr:.2f} s)")

        # Basic comparison: check if sample rates are the same
        if original_sr != translated_sr:
            print("Warning: Sample rates of original and translated audio differ. Visual comparison might be less direct.")
        
        # Plotting waveforms
        fig, axes = plt.subplots(2, 1, figsize=(12, 8), sharex=True, sharey=True)
        self.plot_waveform(original_data, original_sr, "Original Audio Waveform", axes[0])
        self.plot_waveform(translated_data, translated_sr, "Translated Audio Waveform", axes[1])
        plt.tight_layout()
        
        # Save plots to files
        os.makedirs(output_dir, exist_ok=True) # Ensure the directory exists

        original_plot_file = os.path.join(output_dir, "original_audio_waveform.png")
        translated_plot_file = os.path.join(output_dir, "translated_audio_waveform.png")
        
        # Save individual plots
        fig_original, ax_original = plt.subplots(figsize=(12, 4))
        self.plot_waveform(original_data, original_sr, "Original Audio Waveform", ax_original)
        fig_original.savefig(original_plot_file)
        plt.close(fig_original)
        print(f"Original audio waveform plot saved to {original_plot_file}")
        
        fig_translated, ax_translated = plt.subplots(figsize=(12, 4))
        self.plot_waveform(translated_data, translated_sr, "Translated Audio Waveform", ax_translated)
        fig_translated.savefig(translated_plot_file)
        plt.close(fig_translated)
        print(f"Translated audio waveform plot saved to {translated_plot_file}")

        # Close the combined figure if it was created (it's not needed anymore)
        plt.close(fig)

        print("--- Comparison Finished ---")

if __name__ == "__main__":
    comparator = AudioComparator()
    original_audio_path = "temp_original_audio.wav"
    translated_audio_path = "temp_translated_audio.wav"

    if os.path.exists(original_audio_path) and os.path.exists(translated_audio_path):
        comparator.compare_audio_signals(original_audio_path, translated_audio_path)
    else:
        print(f"Error: One or both temporary audio files not found.")
        print(f"Please ensure '{original_audio_path}' and '{translated_audio_path}' are generated by running main_pipeline.py first.")
